setwd("C:/Users/above/OneDrive/Bootcamp/class/16_R/2_Activities/03-Stu_Sardines/Unsolved")
sardines <- read.csv(file="../Resources/sardines.csv")
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
alaska_pop <- subset(sardines, location ==1)
# Calculate the population mean for Sardine Vertebrae in San Diego.
# Hint: use the subset() function to get only the data for San Diego.
Sandiego_pop <- subset(sardines, locatio == 6
)
andiego_pop <- subset(sardines, location == 6
)
alaska_pop <- subset(sardines, location ==1, vertebrae)
Sandiego_pop <- subset(sardines, location == 6, vertebrae)
t.test(alaska_pop, Sandiego_pop)
sardines <- read.csv(file="../Resources/sardines.csv")
# Calculate the population mean for Sardine Vertebrae in Alaska.
# Hint: use the subset() function to get only the data for Alaska.
alaska_pop <- subset(sardines, location ==1, vertebrae)
# Calculate the population mean for Sardine Vertebrae in San Diego.
# Hint: use the subset() function to get only the data for San Diego.
Sandiego_pop <- subset(sardines, location == 6, vertebrae)
# Calculate Independent (Two Sample) T-Test
t.test(alaska_pop, Sandiego_pop)
setwd("C:/Users/above/OneDrive/Bootcamp/class/16_R/2_Activities/04-Ins_ANOVA/Solved")
library(tidyverse)
mosquito <- read.csv(file="04-Ins_ANOVA/Resources/mosquito.csv")
library(tidyverse)
mosquito <- read.csv(file="04-Ins_ANOVA/Resources/mosquito.csv")
mosquito <- read.csv(file="..Resources/mosquito.csv")
setwd("C:/Users/above/OneDrive/Bootcamp/class/16_R/2_Activities/04-Ins_ANOVA")
mosquito <- read.csv(file="..Resources/mosquito.csv")
mosquito <- read.csv(file="Resources/mosquito.csv")
ggplot(mosquito,aes(x=factor(treatment),y=mosq)) + geom_boxplot()
aov(mosq ~ factor(treatment), data=mosquito)
summary(aov(mosq ~ factor(treatment), data=mosquito))
setwd("C:/Users/above/OneDrive/Bootcamp/class/16_R/2_Activities/05-Stu_ANOVA")
hair <- read.csv(file="../Resources/hair.csv")
hair <- read.csv(file="/Resources/hair.csv")
hair <- read.csv(file="/Resources/hair.csv")
# Read in the CSV file.
hair <- read.csv(file="Resources/hair.csv")
ggplot(hair,aes(x=factor(pain),y=HairColour)) + geom_boxplot()
ggplot(hair,aes(x=factor(Pain),y=HairColour)) + geom_boxplot()
summary(aov(hair ~ factor(Pain), data=hair))
summary(aov(HairColour ~ factor(Pain), data=hair))
library(tidyverse)
hair <- read.csv(file="Resources/hair.csv")
ggplot(hair,aes(x=factor(Pain),y=HairColour)) + geom_boxplot()
summary(aov(HairColour ~ factor(Pain), data=hair))
ggplot(hair,aes(x=factor(HairColour),y=Pain)) + geom_boxplot()
summary(aov(Pain ~ factor(HairColour), data=hair)
)
setwd("C:/Users/above/OneDrive/Bootcamp/class/16_R/2_Activities/06-Evr_Fits_and_Regression/Unsolved")
prototype <- read.csv(file="MechaCar_mpg.csv")
setwd("C:/Users/above/OneDrive/Bootcamp/Car_MPG_16")
prototype <- read.csv(file="MechaCar_mpg.csv")
library (dplyr)
library (dplyr)
# Diabetes dataset
# ================
#
#   Notes
# -----
#
#   Ten baseline variables, age, sex, body mass index, average blood
# pressure, and six blood serum measurements were obtained for each of n =
#   442 diabetes patients, as well as the response of interest, a
# quantitative measure of disease progression one year after baseline.
#
# Data Set Characteristics:
#
#   :Number of Instances: 442
#
# :Number of Attributes: First 10 columns are numeric predictive values
#
# :Target: Column 11 is a quantitative measure of disease progression one year after baseline
#
# :Attributes:
#   :Age:
#   :Sex:
#   :Body mass index:
#   :Average blood pressure:
#   :S1:
#   :S2:
#   :S3:
#   :S4:
#   :S5:
#   :S6:
#
#   Note: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).
#
# Source URL:
#   http://www4.stat.ncsu.edu/~boos/var.select/diabetes.html
#
# For more information see:
#   Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) "Least Angle Regression," Annals of Statistics (with discussion), 407-499.
# (http://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)
#  Read in the diabetes.csv file.
diabetes <- read.csv(file="06-Evr_Fits_and_Regression/Resources/diabetes.csv")
diabetes <- read.csv(file="06-Evr_Fits_and_Regression/Resources/diabetes.csv")
setwd("C:/Users/above/OneDrive/Bootcamp/class/16_R/2_Activities/06-Evr_Fits_and_Regression")
setwd("C:/Users/above/OneDrive/Bootcamp/class/16_R/2_Activities")
diabetes <- read.csv(file="06-Evr_Fits_and_Regression/Resources/diabetes.csv")
ggplot(diabetes, aes(bp, One_Year_Disease_Progress)) +
geom_point() +
geom_smooth(method = "lm", se = TRUE)
reg <- lm(One_Year_Disease_Progress ~ bp, data=diabetes)
summary(reg)
summary(reg)$r.squared
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
sample_table <- prototype %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
prototype <- read.csv(file="MechaCar_mpg.csv")
plt + geom_density() #visualize distribution using density plot
setwd("C:/Users/above/OneDrive/Bootcamp/R source")
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
?t.test()
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
head(used_cars)
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter and linear model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("C:/Users/above/OneDrive/Bootcamp/Car_MPG_16")
prototype <- read.csv(file="MechaCar_mpg.csv")
lm(qsec ~ mpg + disp + drat + wt + hp,data=prototype) #generate multiple linear regression model
lm(mpg ~ AWD + grpimd_clearance + spoiler_angle + vehicle_weight + vehicle_length,data=prototype) #generate multiple linear regression model
lm(mpg ~ AWD + ground_clearance + spoiler_angle + vehicle_weight + vehicle_length,data=prototype) #generate multiple linear regression model
plt <- ggplot(ptototype,aes(x=log10(MPG))) #import dataset into ggplot2
plt <- ggplot(prototype,aes(x=log10(MPG))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
lt <- ggplot(prototype,aes(x=log10(mpg))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
library (dplyr)
head(prototype)
lm(formula = mpg ~ AWD + ground_clearance + spoiler_angle + vehicle_weight + vehicle_length, data = prototype) #generate multiple linear regression model
Summary (lm(formula = mpg ~ AWD + ground_clearance + spoiler_angle + vehicle_weight + vehicle_length, data = prototype))
summary(lm(formula = mpg ~ AWD + ground_clearance + spoiler_angle + vehicle_weight + vehicle_length, data = prototype))
Coil_table <- read.csv(file='Suspension_Coil.csv', check.names=f, stringsAsFactors = F)
Coil_table <- read.csv(file='Suspension_Coil.csv', check.names=F, stringsAsFactors = F)
head(coil_table)
head(coil_table)
Coil_table
total_summary <- coil_table %>% summarize (Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
total_summary <- Coil_table %>% summarize (Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
total_summary
lot_summary <- Coil_table %>% group_by (Manufacturing_lot) %>% summarize (Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
lot_summary <- Coil_table %>% group_by (Manufacturing_Lot) %>% summarize (Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
head(lot_summary)
head(total_summary)
head(Coil_table)
t.test((Coil_table$PSI),mu=1500)
t.test((subset(Coil_table, Manufacturing_Lot == "Lot1")$PSI),mu=(1500))
t.test((subset(Coil_table, Manufacturing_Lot == "Lot2")$PSI),mu=(1500))
t.test((subset(Coil_table, Manufacturing_Lot == "Lot3")$PSI),mu=(1500))
t.test((subset(Coil_table, Manufacturing_Lot == "Lot1")$PSI),mu=(1500))
